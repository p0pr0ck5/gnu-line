location / {

content_by_lua_block {
	local usage = [[
gnu-line.com - A newline generating microservice

Provide two query params, 'count' and 'format', via either GET or POST payload,
and an optional param 'json' to configure reponse formatting. Note that request
body payload params are given priority over URI query params.

'count' may be between 0 and 1024, inclusive. For larger or enterprise newline
needs, please contact sales@gnu-line.com for details on Enterprise Newline plans.

'format' may be one of

* 'lf' - line feed
* 'cr' - carriage return
* 'cr_lf' - carriage return + line feed
* 'html' - HTML break (<br />)

If format is not provided, 'lf' will be used. Undefined formats are unsupported.

By default, responses are JSON-encoded. Two fields exists: 'status', which
defines the result of the query (and also mimics the HTTP status), and 'msg',
which contains the response body. If 'json' is set to false, the response body
will be sent as text/plain.

* Examples:

$ curl gnu-line.com/?count=10
{"status":200,"msg":"\n\n\n\n\n\n\n\n\n\n"}

$ curl -d count=5 gnu-line.com/
{"status":200,"msg":"\n\n\n\n\n"}

$ curl 'gnu-line.com/?count=5&format=cr_lf'
{"status":200,"msg":"\r\n\r\n\r\n\r\n\r\n"}

$ curl 'gnu-line.com/?count=3&json=false'




$ curl 'gnu-line.com/?count=-1'
{"status":400,"msg":"You must generate between 0 and 1024 newlines."}

]]

	local cjson = require("cjson")

	local function write_response(status, response, json)
		ngx.status = status
		ngx.header["Server"] = "gnu-line v1"

		if (not json) then
			ngx.header["Content-Type"] = "text/plain"
			ngx.say(response)
		else
			ngx.header["Content-Type"] = "application/json"
			ngx.print(cjson.encode({ status = status, msg = response }))
		end

		ngx.exit(ngx.OK)
	end

	local function err(error)
		write_response(400, error, true)
	end

	local format_lookup = {
		lf    = "\n",
		cr    = "\r",
		cr_lf = "\r\n",
		html  = "<br />",
	}

	ngx.req.read_body()

	local pargs = ngx.req.get_post_args()
	local gargs = ngx.req.get_uri_args()

	local count  = tonumber(pargs.count) or tonumber(gargs.count)
	local format = pargs.format or gargs.format
	local json   = pargs.json or gargs.json or true
	local help   = pargs.help or gargs.help or not count and not format

	if (json == 'false') then
		json = false
	end

	if (help) then
		write_response(200, usage, false)
	end

	if (not count) then
		err("You must define the number of newlines to generate.")
	end

	if (count < 0) then
		err("You must generate between 0 and 1024 newlines.")
	end

	if (count > 1024) then
		err("Too many newlines requested. Please contact sales@gnu-line.com for details on Enterprise Newline plans.")
	end

	format = format or 'lf'
	local newline = format_lookup[format]
	if (not newline) then
		err("Invalid format provided")
	end

	local response = {}
	for i=1, count do
		response[i] = newline
	end

	write_response(200, table.concat(response, ''), json)
}

}

